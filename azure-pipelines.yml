trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '10.x'
  displayName: 'Install Node.js'

- script: |
    npm install -g @angular/cli
    npm install
    npm audit fix --prod
    ng config -g cli.warnings.versionMismatch false
    ng build --prod --build-optimizer
  displayName: 'npm install and build'

- script: |
    ng test --watch=false --codeCoverage=true
  condition: succeededOrFailed()
  displayName: 'unit test & code coverage'

#- script: |
#    ng lint --  --format=stylish
#  condition: succeededOrFailed()
#  displayName: 'code lint'

#- task: Npm@1
#  inputs:
#    command: 'custom'
#    customCommand: 'run lint --  --format=stylish'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: 'dist'
    ArtifactName: 'drop'
    publishLocation: 'Container'

# - task: PublishTestResults@2
#   #condition: succeededOrFailed()
#   inputs:
#     testResultsFormat: 'JUnit'
#     testResultsFiles: 'junit/TEST*-*.xml'
#     testRunTitle: 'Quotes Unit Test'

# - task: PublishCodeCoverageResults@1
#   #condition: succeededOrFailed()
#   inputs:
#     codeCoverageTool: 'Cobertura'
#     summaryFileLocation: '$(Build.SourcesDirectory)/coverage/cobertura-coverage.xml'
#     failIfCoverageEmpty: false
#   displayName: 'Publish Code Coverage Results'

# - task: ArchiveFiles@2
#   inputs:
#     rootFolderOrFile: 'dist'
#     includeRootFolder: false
#     archiveType: 'zip'
#     archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
#     replaceExistingArchive: true

#- task: PublishPipelineArtifact@1
#  inputs:
#    targetPath: '$(Pipeline.Workspace)'
    # artifact: 'qa'
    # publishLocation: 'pipeline'
